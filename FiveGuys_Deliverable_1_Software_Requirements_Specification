Software Requirements Specification
for
Quarto App
Version 1.0 approved
Prepared by Alex Landry, Forrest Swift
Five Guys
2/25/2021

Table of Contents
  Table of Contents    ii
  Revision History     ii
  1.    Introduction    1
    1.1    Purpose    1
    1.2    Document Conventions    1
    1.3    Intended Audience and Reading Suggestions    1
    1.4    Product Scope    1
    1.5    References    1
  2.    Overall Description    2
    2.1    Product Perspective    2
    2.2    Product Functions    2
    2.3    User Classes and Characteristics    2
    2.4    Operating Environment    2
    2.5    Design and Implementation Constraints    2
    2.6    User Documentation    2
    2.7    Assumptions and Dependencies    3
  3.    External Interface Requirements    3
    3.1    User Interfaces    3
    3.2    Hardware Interfaces    3
    3.3    Software Interfaces    3
    3.4    Communications Interfaces    3
  4.    System Features    4
    4.1    System Feature 1    4
    4.2    System Feature 2 (and so on)    4
  5.    Other Nonfunctional Requirements    4
    5.1    Performance Requirements    4
    5.2    Safety Requirements    5
    5.3    Security Requirements    5
    5.4    Software Quality Attributes    5
    5.5    Business Rules    5
  6.    Other Requirements    5
  Appendix A: Glossary    5
  Appendix B: Analysis Models    5
  Appendix C: To Be Determined List    6


Revision History:
Name
Date
Reason For Changes
Version


-----------------------------------------------------------------------------------------------------------------------------------------

1. Introduction

1.1 Purpose 
    <Identify the product whose software requirements are specified in this document, including the revision or release number. 
  Describe the scope of the product that is covered by this SRS, particularly if this SRS describes only part of the system 
  or a single subsystem.>
  
    The product that this SRS describes is an application that allows the user to play the game Quarto. This application will have 
    many features that will teach players about the game and how to play the game. This application does not currently have a release 
    number and is currently still in development. This application is being made for people who want to enjoy a board game with friends 
    while also maybe learning something about the game they previously did not know. Also a goal of this application is to help teach 
    new players how to play the game.

1.2 Document Conventions
    <Describe any standards or typographical conventions that were followed when writing this SRS, such as fonts or highlighting
    that have special significance. For example, state whether priorities  for higher-level requirements are assumed to be 
    inherited by detailed requirements, or whether every requirement statement is to have its own priority.>
    
    In this document high priority requirements will be bolded.
    
1.3 Intended Audience and Reading Suggestions
    <Describe the different types of reader that the document is intended for, such as developers, project managers, marketing
    staff, users, testers, and documentation writers. Describe what the rest of this SRS contains and how it is organized. Suggest
    a sequence for reading the document, beginning with the overview sections and proceeding through the sections that are most 
    pertinent to each reader type.>
    
      The intended audience for this document is for anyone who is working with this application such as developers, project managers, 
    users, testers, documentation writers, etc. This document contains the reason why this application is being developed and how. It also 
    goes into detail of what the future plans are for this application and what will be added. It will discuss what is needed to use the 
    application and what the application needs in order to function properly for the user. It is recommended that you check the table of contents
    to find specifically what you are looking for. The best way to read this document is from start to finish. The reason for this is that by 
    reading it all you get a full understanding of the goals and objectives of the application. If you are searching for something specific the table
    of contents mentioned earlier would be beneficial or just by reading the section names would give you an idea of what is being discussed in that section. 
    
1.4 Product Scope
    <Provide a short description of the software being specified and its purpose, including relevant benefits, objectives, and goals.
    Relate the software to corporate goals or business strategies. If a separate vision and scope document is available, refer to it 
    rather than duplicating its contents here.>
    
    Our Quarto software has the main goal of emulating all aspects of the board game Quarto, including being able to rotate a board,
    choose pieces for your opponent, place pieces on the board, and recognize victory conditions. Other important features will include
    tutorials for new players and beginner ai to allow new players to learn the rules of the game. To keep our business able to produce
    high quality games, we will be offering microtransactions to allow players to support our game if they enjoy it, including reskins
    and recolors of pieces, the board, and backgrounds.
    
1.5 References
    <List any other documents or Web addresses to which this SRS refers. These may include user interface style guides, contracts, 
    standards, system requirements specifications, use case documents, or a vision and scope document. Provide enough information so 
    that the reader could access a copy of each reference, including title, author, version number, date, and source or location.>

-----------------------------------------------------------------------------------------------------------------------------------------

2. Overall Description

2.1 Product Perspective
    <Describe the context and origin of the product being specified in this SRS. For example, state whether this product is a follow-on 
    member of a product family, a replacement for certain existing systems, or a new, self-contained product. If the SRS defines a 
    component of a larger system, relate the requirements of the larger system to the functionality of this software and identify interfaces 
    between the two. A simple diagram that shows the major components of the overall system, subsystem interconnections, and external 
    interfaces can be helpful.>
    
    This software will be a self contained game, intended to compete with other board game apps on the market.
    
2.2 Product Functions
    <Summarize the major functions the product must perform or must let the user perform. Details will be provided in Section 3, so only a high 
    level summary (such as a bullet list) is needed here. Organize the functions to make them understandable to any reader of the SRS. A picture 
    of the major groups of related requirements and how they relate, such as a top level data flow diagram or object class diagram, is often effective.>
    
    - Allow the board to rotate to 4 viewpoints
    - Allow players to choose pieces for their opponent
    - Allow players to place the piece chosen by their opponent
    - Recognize "4-in-a-row" victory conditions
    - Allow players to purchase recolors and reskins for their pieces, board, and backgrounds
    - Allow players to select a tutorial, which explains the game rules to the player
    - Allow players to compete against beginner ai
    
2.3 User Classes and Characteristics
    <Identify the various user classes that you anticipate will use this product. User classes may be differentiated based on frequency of use, subset 
    of product functions used, technical expertise, security or privilege levels, educational level, or experience. Describe the pertinent characteristics 
    of each user class. Certain requirements may pertain only to certain user classes. Distinguish the most important user classes for this product from 
    those who are less important to satisfy.>
    
    There will be several user classes for this application that will be split based on expected desired functionality. An example would be a beginner vs 
    a competitive user. One difference between function of these user classes would be beginner users being hinted to use the tutorial vs experienced 
    players not recieving this indicator. There will also be classes to distinguish between casual and competitive non-beginner users, as well as a class 
    for users who utilize our microtransactions. An example of functionality specific to a paying user would be providing bundled deals on reskins and recolors. 
    While there will be additional prompts and indicators based on user class, there will be no limited functions between users.
    
    To sum, possible user subclasses:
    - Beginner user - Prompted to use tutorial, matched with other beginners or beginner ai until they improve.
    - Casual user - Prompted to play against beginner ai, matched with beginner ai or other casual players.
    - Competitive user - Prompted to play the ranked game mode, matched with casual players or ranked players based on mode.
    - Paying user - Offered a bundled deal once per month, matched with casual players or ranked players based on mode.
    
2.4 Operating Environment
    <Describe the environment in which the software will operate, including the hardware platform, operating system and versions, and any other software 
    components or applications with which it must peacefully coexist.>
    
      The application will be ran on the android 11 platform. The application does not need any other applications to run and has no applications 
     needed to fully function.
    
2.5 Design and Implementation Constraints
    <Describe any items or issues that will limit the options available to the developers. These might include: corporate or regulatory policies; hardware 
    limitations (timing requirements, memory requirements); interfaces to other applications; specific technologies, tools, and databases to be used; parallel 
    operations; language requirements; communications protocols; security considerations; design conventions or programming standards (for example, if the 
    customer’s organization will be responsible for maintaining the delivered software).>
    
    The software will be running in a mobile environment, so low hardware requirements and fitting onto a small screen are important. Language translation
    options will expand the userbase but also requires minimal text so as to lower translation difficulty. As the software is being developed for android systems,
    the software must be developed inside an android IDE.
    
2.6 User Documentation
    <List the user documentation components (such as user manuals, on-line help, and tutorials) that will be delivered along with the software. Identify any 
    known user documentation delivery formats or standards.>
    
      The application will include a rule page where it covers the rules of the game. Every user will also have the option to complete a tutorial on how to 
     play quarto. This will delivered to the user inside of the application. There will be a button to click, much like a settings button that will bring you to a 
     different screen that explain the rules and how to play. 
    

2.7 Assumptions and Dependencies
    <List any assumed factors (as opposed to known facts) that could affect the requirements stated in the SRS. These could include third-party or commercial 
    components that you plan to use, issues around the development or operating environment, or constraints. The project could be affected if these assumptions 
    are incorrect, are not shared, or change. Also identify any dependencies the project has on external factors, such as software components that you intend to 
    reuse from another project, unless they are already documented elsewhere (for example, in the vision and scope document or the project plan).>
    
    The development will be done in an android IDE, however there will be no other dependencies on any external systems.


-----------------------------------------------------------------------------------------------------------------------------------------

3. External Interface Requirements

3.1 User Interfaces
    <Describe the logical characteristics of each interface between the software product and the users. This may include sample screen 
    images, any GUI standards or product family style guides that are to be followed, screen layout constraints, standard buttons and 
    functions (e.g., help) that will appear on every screen, keyboard shortcuts, error message display standards, and so on. Define the 
    software components for which a user interface is needed. Details of the user interface design should be documented in a separate 
    user interface specification.>
    
    The main goals of the GUI will be clarity and simplicity. Clear, large fonts with few buttons and clickable areas will enable our
    users to easily identify what they should be doing. As the software will be developed for android smartphones, the screen must be
    able to be clearly viewed and interacted with on a smaller display.
    
    Main screen:
      - Play button
      - Tutorial button
      - Settings button
      - Shop button
    
    Settings screen:
      - SFX volume slider
      - Music volume slider
      - Language selection
      
    Game screen:
      - Centrally positioned isometric board
      - Change board view arrows - rotate board 90 degrees east or west. Clickable
      - 16 pieces in side trays, 8 on either side of the board
    
3.2 Hardware Interfaces
    <Describe the logical and physical characteristics of each interface between the software product and the hardware components of the 
    system. This may include the supported device types, the nature of the data and control interactions between the software and the 
    hardware, and communication protocols to be used.>
    
3.3 Software Interfaces
    <Describe the connections between this product and other specific software components (name and version), including databases, operating 
    systems, tools, libraries, and integrated commercial components. Identify the data items or messages coming into the system and going 
    out and describe the purpose of each. Describe the services needed and the nature of communications. Refer to documents that describe 
    detailed application programming interface protocols. Identify data that will be shared across software components. If the data sharing 
    mechanism must be implemented in a specific way (for example, use of a global data area in a multitasking operating system), specify this 
    as an implementation constraint.>
    
3.4 Communications Interfaces
    <Describe the requirements associated with any communications functions required by this product, including e-mail, web browser, network 
    server communications protocols, electronic forms, and so on. Define any pertinent message formatting. Identify any communication standards 
    that will be used, such as FTP or HTTP. Specify any communication security or encryption issues, data transfer rates, and 
    synchronization mechanisms.>
    

-----------------------------------------------------------------------------------------------------------------------------------------

4. System Features
    <This template illustrates organizing the functional requirements for the product by system features, the major services provided 
    by the product. You may prefer to organize this section by use case, mode of operation, user class, object class, functional hierarchy, 
    or combinations of these, whatever makes the most logical sense for your product.>
    
4.1 System Feature 1
    <Don’t really say “System Feature 1.” State the feature name in just a few words.>
4.1.1    Description and Priority
    <Provide a short description of the feature and indicate whether it is of High, Medium, or Low priority. You could also include 
    specific priority component ratings, such as benefit, penalty, cost, and risk (each rated on a relative scale from a low of 1 
    to a high of 9).>
4.1.2    Stimulus/Response Sequences
    <List the sequences of user actions and system responses that stimulate the behavior defined for this feature. These will correspond 
    to the dialog elements associated with use cases.>
4.1.3    Functional Requirements
    <Itemize the detailed functional requirements associated with this feature. These are the software capabilities that must be present 
    in order for the user to carry out the services provided by the feature, or to execute the use case. Include how the product should 
    respond to anticipated error conditions or invalid inputs. Requirements should be concise, complete, unambiguous, verifiable, and 
    necessary. Use “TBD” as a placeholder to indicate when necessary information is not yet available.>

    <Each requirement should be uniquely identified with a sequence number or a meaningful tag of some kind.>

    REQ-1:    
    REQ-2:   

4.2 System Feature 2 (and so on)


-----------------------------------------------------------------------------------------------------------------------------------------

5. Other Nonfunctional Requirements
5.1 Performance Requirements
    <If there are performance requirements for the product under various circumstances, state them here and explain their rationale, 
    to help the developers understand the intent and make suitable design choices. Specify the timing relationships for real time 
    systems. Make such requirements as specific as possible. You may need to state performance requirements for individual functional 
    requirements or features.>
    
    The system shall not utilize more than 4GB of ram during normal runtime
    
5.2 Safety Requirements
    <Specify those requirements that are concerned with possible loss, damage, or harm that could result from the use of the product. 
    Define any safeguards or actions that must be taken, as well as actions that must be prevented. Refer to any external policies or
    regulations that state safety issues that affect the product’s design or use. Define any safety certifications that must be satisfied.>
    
    The system shall abide by COPPA and will only allow account creation by users 13 years of age or older.
    
5.3 Security Requirements
    <Specify any requirements regarding security or privacy issues surrounding use of the product or protection of the data used or created 
    by the product. Define any user identity authentication requirements. Refer to any external policies or regulations containing security 
    issues that affect the product. Define any security or privacy certifications that must be satisfied.>
    
5.4 Software Quality Attributes
    <Specify any additional quality characteristics for the product that will be important to either the customers or the developers. Some to 
    consider are: adaptability, availability, correctness, flexibility, interoperability, maintainability, portability, reliability, reusability, 
    robustness, testability, and usability. Write these to be specific, quantitative, and verifiable when possible. At the least, clarify the 
    relative preferences for various attributes, such as ease of use over ease of learning.>
    
    The system shall not crash for the first hour of gametime, 90% of the time
    
    The system shall relay a players move to their opponent within 30 seconds, 99% of the time.
    
    The system shall reach the game screen from launch within 1 minute, 99% of the time.
    
    
5.5 Business Rules
    <List any operating principles about the product, such as which individuals or roles can perform which functions under specific circumstances. 
    These are not functional requirements in themselves, but they may imply certain functional requirements to enforce the rules.>
    
    


-----------------------------------------------------------------------------------------------------------------------------------------

6. Other Requirements
    <Define any other requirements not covered elsewhere in the SRS. This might include database requirements, internationalization requirements, 
    legal requirements, reuse objectives for the project, and so on. Add any new sections that are pertinent to the project.>
    

-----------------------------------------------------------------------------------------------------------------------------------------

Appendix A: Glossary
    <Define all the terms necessary to properly interpret the SRS, including acronyms and abbreviations. You may wish to build a separate 
    glossary that spans multiple projects or the entire organization, and just include terms specific to a single project in each SRS.>
    
    Quarto: A board game with 16 unique pieces that are either large or small, dark or light, hollow or solid, and round or square. Players
            take turns selecting pieces for their opponent to place on a 4x4 grid. The goal of the game is to connect 4 of a kind in a row 
            by forcing your opponent to give you a winning piece.
            
    Isometric: A 2.5d art style that creates an illusion of 3d by looking at the scene from a diagonal view.

Appendix B: Analysis Models
    <Optionally, include any pertinent analysis models, such as data flow diagrams, class diagrams, state-transition diagrams, or 
    entity-relationship diagrams.>

Appendix C: To Be Determined List
    <Collect a numbered list of the TBD (to be determined) references that remain in the SRS so they can be tracked to closure.>
